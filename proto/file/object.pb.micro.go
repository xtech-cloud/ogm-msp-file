// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/file/object.proto

package omo_msa_file

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Object service

type ObjectService interface {
	// 准备一个对象的元数据
	Prepare(ctx context.Context, in *ObjectPrepareRequest, opts ...client.CallOption) (*ObjectPrepareResponse, error)
	// 写入一个对象的元数据
	Flush(ctx context.Context, in *ObjectFlushRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 获取一个对象信息
	Get(ctx context.Context, in *ObjectGetRequest, opts ...client.CallOption) (*ObjectGetResponse, error)
	// 删除一个对象
	Remove(ctx context.Context, in *ObjectRemoveRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 列举一个存储桶中的所有对象
	List(ctx context.Context, in *ObjectListRequest, opts ...client.CallOption) (*ObjectListResponse, error)
}

type objectService struct {
	c    client.Client
	name string
}

func NewObjectService(name string, c client.Client) ObjectService {
	return &objectService{
		c:    c,
		name: name,
	}
}

func (c *objectService) Prepare(ctx context.Context, in *ObjectPrepareRequest, opts ...client.CallOption) (*ObjectPrepareResponse, error) {
	req := c.c.NewRequest(c.name, "Object.Prepare", in)
	out := new(ObjectPrepareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectService) Flush(ctx context.Context, in *ObjectFlushRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Object.Flush", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectService) Get(ctx context.Context, in *ObjectGetRequest, opts ...client.CallOption) (*ObjectGetResponse, error) {
	req := c.c.NewRequest(c.name, "Object.Get", in)
	out := new(ObjectGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectService) Remove(ctx context.Context, in *ObjectRemoveRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Object.Remove", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectService) List(ctx context.Context, in *ObjectListRequest, opts ...client.CallOption) (*ObjectListResponse, error) {
	req := c.c.NewRequest(c.name, "Object.List", in)
	out := new(ObjectListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Object service

type ObjectHandler interface {
	// 准备一个对象的元数据
	Prepare(context.Context, *ObjectPrepareRequest, *ObjectPrepareResponse) error
	// 写入一个对象的元数据
	Flush(context.Context, *ObjectFlushRequest, *BlankResponse) error
	// 获取一个对象信息
	Get(context.Context, *ObjectGetRequest, *ObjectGetResponse) error
	// 删除一个对象
	Remove(context.Context, *ObjectRemoveRequest, *BlankResponse) error
	// 列举一个存储桶中的所有对象
	List(context.Context, *ObjectListRequest, *ObjectListResponse) error
}

func RegisterObjectHandler(s server.Server, hdlr ObjectHandler, opts ...server.HandlerOption) error {
	type object interface {
		Prepare(ctx context.Context, in *ObjectPrepareRequest, out *ObjectPrepareResponse) error
		Flush(ctx context.Context, in *ObjectFlushRequest, out *BlankResponse) error
		Get(ctx context.Context, in *ObjectGetRequest, out *ObjectGetResponse) error
		Remove(ctx context.Context, in *ObjectRemoveRequest, out *BlankResponse) error
		List(ctx context.Context, in *ObjectListRequest, out *ObjectListResponse) error
	}
	type Object struct {
		object
	}
	h := &objectHandler{hdlr}
	return s.Handle(s.NewHandler(&Object{h}, opts...))
}

type objectHandler struct {
	ObjectHandler
}

func (h *objectHandler) Prepare(ctx context.Context, in *ObjectPrepareRequest, out *ObjectPrepareResponse) error {
	return h.ObjectHandler.Prepare(ctx, in, out)
}

func (h *objectHandler) Flush(ctx context.Context, in *ObjectFlushRequest, out *BlankResponse) error {
	return h.ObjectHandler.Flush(ctx, in, out)
}

func (h *objectHandler) Get(ctx context.Context, in *ObjectGetRequest, out *ObjectGetResponse) error {
	return h.ObjectHandler.Get(ctx, in, out)
}

func (h *objectHandler) Remove(ctx context.Context, in *ObjectRemoveRequest, out *BlankResponse) error {
	return h.ObjectHandler.Remove(ctx, in, out)
}

func (h *objectHandler) List(ctx context.Context, in *ObjectListRequest, out *ObjectListResponse) error {
	return h.ObjectHandler.List(ctx, in, out)
}
